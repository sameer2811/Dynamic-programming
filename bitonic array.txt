int longestBitonicSubarray(int *input, int n) 
{
    int max_ans=-1;
    int *increasing=new int[n];
    int *decreasing=new int[n];
    
    for(int i=0;i<n;i++)
    increasing[i]=1;
    
    for(int i=0;i<n;i++)
    decreasing[i]=1;
    
    for(int i=0;i<n;i++)// FOR INCREASING ARRAY
    {
        for(int j=0;j<i;j++)
        {
            if(input[j]<input[i])
            {
                increasing[i]=max(increasing[i],increasing[j]+1);
            }
        }
    }
    for(int i=n-1;i>=0;i--)// FOR DECREASING ARRAY
    {
        for(int j=n-1;j>=i;j--)
        {
            if(input[j]<input[i])
            {
                decreasing[i]=max(decreasing[i],decreasing[j]+1);
            }
        }
    }
    for(int i=0;i<n;i++)
    {
        if((increasing[i]+decreasing[i]-1)>max_ans)// -1 for the reasonn because that point is common for increasing as well as decreasing
        max_ans=increasing[i]+decreasing[i]-1;
    }
    
	return max_ans;
     	
}

